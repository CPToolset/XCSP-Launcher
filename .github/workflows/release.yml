# .github/workflows/release.yml
name: Release on tag

on:
  push:
    tags:
      - "v*"

permissions:
  id-token: write
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python deps
        run: |
          pip install build twine pyinstaller
          pip install .

      - name: Build Python package
        run: python -m build

      - name: Publish to PyPI
        if: matrix.os == 'ubuntu-latest'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/* || true

      - name: Build binary with PyInstaller
        run: make pyinstaller

      - name: Build extra Linux packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm fakeroot tar libarchive-tools
          sudo gem install --no-document fpm
          make deb pacman rpm

      - name: Homebrew (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          make brew
          git clone --quiet https://x-access-token:${{ secrets.XCSP_GITHUB_TOKEN }}@github.com/CPToolset/homebrew-xcsp-launcher.git brew-tap
          mkdir -p brew-tap/Formula/
          cp .packaging/homebrew/xcsp.rb brew-tap/Formula/xcsp.rb
          cd brew-tap && git add Formula/ && git commit -m "Update formula for version $(VERSION)" && git push
          rm -rf brew-tap
        env:
          GITHUB_TOKEN: ${{ secrets.XCSP_GITHUB_TOKEN }}

#      - name: Chocolatey (Windows only)
#        if: matrix.os == 'windows-latest'
#        shell: powershell
#        run: |
#          Copy-Item dist/xcsp.exe -Destination "chocolatey/tools/xcsp.exe"
#          Copy-Item xcsp/tools/xcsp3-solutionChecker-2.5.jar -Destination "chocolatey/tools/xcsp3-solutionChecker-2.5.jar"
#          Push-Location chocolatey
#          choco pack xcsp-launcher.nuspec
#          Pop-Location
#          choco push chocolatey/xcsp-launcher.*.nupkg --api-key ${{ secrets.CHOCOLATEY_API_KEY }} --source="https://push.chocolatey.org/"

      - name: Upload built binaries and packages
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: |
            dist/xcsp*
            *.deb
            *.rpm
            *.pkg.tar.*
            *.tar.gz
            *.snap
            chocolatey/*.nupkg

  finalize:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Download all built binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate checksums
        run: |
          find artifacts -type f -exec sha256sum {} \; > checksums.txt

      - name: Sign checksums.txt with cosign
        run: |
          cosign sign-blob --yes \
            --output-signature checksums.txt.sig \
            --output-certificate checksums.txt.pem \
            checksums.txt
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true # force draft release to allow manual review before publishing
          prerelease: ${{ contains(github.ref_name, 'a') || contains(github.ref_name, 'b') || contains(github.ref_name, 'rc') }}
          body: |
            ${{steps.github_release.outputs.changelog}}

            ---

            ## üîê Verifying the artifacts

            All release artifacts (executables and packages for every OS) are included in the signed `checksums.txt` file.

            ### How to verify:

            1. Download `checksums.txt`, `checksums.txt.sig`, and `checksums.txt.pem` from the release.
            2. Run this command:

            ```bash
            cosign verify-blob \
              --cert checksums.txt.pem \
              --signature checksums.txt.sig \
              --certificate-identity "https://github.com/CPToolset/xcsp-launcher/.github/workflows/release.yml@refs/heads/main" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
              checksums.txt
            ```

            If the output is `Verified OK`, you can then validate the integrity of the downloaded files:

            ```bash
            sha256sum --ignore-missing -c checksums.txt
            ```
          files: |
            artifacts/**/*
            checksums.txt
            checksums.txt.sig
            checksums.txt.pem
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# .github/workflows/release.yml
name: Release on tag

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python deps
        run: |
          pip install build twine pyinstaller
          pip install .

      - name: Build Python package
        run: python -m build

      - name: Build binary with PyInstaller
        run: make pyinstaller

      - name: Build extra Linux packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm fakeroot tar
          sudo gem install --no-document fpm
          make deb pacman rpm

      - name: Chocolatey (Windows only)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Copy-Item dist/xcsp.exe -Destination "chocolatey/tools/xcsp.exe"
          Copy-Item xcsp/tools/xcsp3-solutionChecker-2.5.jar -Destination "chocolatey/tools/xcsp3-solutionChecker-2.5.jar"
          Push-Location chocolatey
          choco pack xcsp-launcher.nuspec
          Pop-Location
          choco push chocolatey/xcsp-launcher.*.nupkg --api-key ${{ secrets.CHOCOLATEY_API_KEY }} --source="https://push.chocolatey.org/"

      - name: Homebrew (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          make brew
          git clone --quiet https://x-access-token:${{ secrets.XCSP_GITHUB_TOKEN }}@github.com/CPToolset/homebrew-xcsp-launcher.git brew-tap
          mkdir -p brew-tap/Formula/
          cp .packaging/homebrew/xcsp.rb brew-tap/Formula/xcsp.rb
          cd brew-tap && git add Formula/ && git commit -m "Update formula for version $(VERSION)" && git push
          rm -rf brew-tap
        env:
          GITHUB_TOKEN: ${{ secrets.XCSP_GITHUB_TOKEN }}

      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate checksums (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sha256sum dist/* > checksums.txt
          sha256sum *.deb *.rpm *.pkg.tar.* *.snap *.tar.gz || true >> checksums.txt

      - name: Install cosign (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: sigstore/cosign-installer@v3

      - name: Sign checksums.txt with cosign (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cosign sign-blob --yes \
            --output-signature checksums.txt.sig \
            --output-certificate checksums.txt.pem \
            checksums.txt
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Create GitHub Release
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ contains(github.ref_name, 'a') || contains(github.ref_name, 'b') || contains(github.ref_name, 'rc') }}
          body: |
            ${{steps.github_release.outputs.changelog}}

            ---

            ## üîê Verifying the artifacts

            To verify the integrity and authenticity of the downloaded files:

            1. Download the `checksums.txt`, `checksums.txt.sig`, and `checksums.txt.pem` files from this release.
            2. Use `cosign` to verify the signature:

            ```bash
            cosign verify-blob \
              --cert checksums.txt.pem \
              --signature checksums.txt.sig \
              --certificate-identity "https://github.com/CPToolset/xcsp-launcher/.github/workflows/release.yml@refs/heads/main" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
              checksums.txt
            ```

            If the output is `Verified OK`, you can now safely check the file hashes:

            ```bash
            sha256sum --ignore-missing -c checksums.txt
            ```
          files: |
            dist/xcsp*
            *.deb
            *.rpm
            *.pkg.tar.*
            *.snap
            *.tar.gz
            chocolatey/*.nupkg
            checksums.txt
            checksums.txt.sig
            checksums.txt.pem
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# .github/workflows/release.yml
name: Release on tag

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python deps
        run: |
          pip install build twine pyinstaller
          pip install .

      - name: Build Python package
        run: python -m build

      - name: Publish to PyPI
        if: matrix.os == 'ubuntu-latest'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/* || true

      - name: Build binary with PyInstaller
        run: make pyinstaller
#      - name: Install Snapcraft and build snap  (Linux only)
#        if: matrix.os == 'ubuntu-latest'
#        id: snapcraft
#        uses: snapcore/action-build@v1
#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'ubuntu-latest'
#        with:
#          name: snap
#          path: ${{ steps.snapcraft.outputs.snap }}
#      - name: Publish SNAP to the snap store
#        uses: snapcore/action-publish@v1
#        if: matrix.os == 'ubuntu-latest'
#        with:
#          snap: ${{ steps.snapcraft.outputs.snap }}
#        env:
#          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_LOGIN_FILE }}
      - name: Build DEB (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm
          make deb
#          make snap
#          snapcraft login --with ${{ secrets.SNAPCRAFT_LOGIN_FILE }}
#          snapcraft push *.snap
      - name: Chocolatey (Windows only)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Copy-Item dist/xcsp.exe -Destination "chocolatey/tools/xcsp.exe"
          Copy-Item "xcsp/tools/xcsp3-solutionChecker-2.5.jar" -Destination "chocolatey/tools/xcsp3-solutionChecker-2.5.jar"
          Push-Location chocolatey
          choco pack xcsp-launcher.nuspec
          Pop-Location
          choco push chocolatey/xcsp-launcher.*.nupkg --api-key ${{ secrets.CHOCOLATEY_API_KEY }} --source="https://push.chocolatey.org/"

      - name: Homebrew (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          make brew
          git clone --quiet https://x-access-token:${{ secrets.XCSP_GITHUB_TOKEN }}@github.com/CPToolset/homebrew-xcsp-launcher.git brew-tap
          mkdir -p brew-tap/Formula/
          cp .packaging/homebrew/xcsp.rb brew-tap/Formula/xcsp.rb
          cd brew-tap && git add Formula/ && git commit -m "Update formula for version $(VERSION)" && git push
          rm -rf brew-tap
        env:
          GITHUB_TOKEN: ${{ secrets.XCSP_GITHUB_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ contains(github.ref_name, 'a') || contains(github.ref_name, 'b') || contains(github.ref_name, 'rc') }}
          files: |
            dist/*
            *.deb
            ${{ steps.snapcraft.outputs.snap }}
            chocolatey/*.nupkg
            *macos.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

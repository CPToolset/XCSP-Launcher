# .github/workflows/release.yml
name: Release on tag

on:
  push:
    tags:
      - "v*"

permissions:
  id-token: write
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python deps
        run: |
          pip install build twine pyinstaller
          pip install .

      - name: Build Python package
        if: matrix.os == 'ubuntu-latest'
        run: python -m build

      - name: Publish to PyPI
        if: matrix.os == 'ubuntu-latest'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/* || true

      - name: Build binary with PyInstaller
        run: make pyinstaller

      - name: Build extra Linux packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm fakeroot tar libarchive-tools
          sudo gem install --no-document fpm
          make deb pacman rpm
      - name: Install Rosetta (if needed)
        if: matrix.os == 'macos-latest'
        run: |
          sudo /usr/sbin/softwareupdate --install-rosetta --agree-to-license || true
      - name: Build universal binary with lipo (arm64 + x86_64)
        if: matrix.os == 'macos-latest'
        run: |
            mkdir -p dist-universal
            cp dist/xcsp dist-universal/xcsp-arm64
            arch -x86_64 pyinstaller --onefile --name xcsp-x86_64 --paths=. bin/main.py
            cp dist/xcsp-x86_64 dist-universal/xcsp-x86_64
            lipo -create dist-universal/xcsp-arm64 dist-universal/xcsp-x86_64 -output dist-universal/xcsp
      - name: Import Apple certificate
        if: matrix.os == 'macos-latest'
        run: |
          echo "$CERT_P12_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        env:
          CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
      - name: Sign macOS binary
        if: matrix.os == 'macos-latest'
        run: |
          codesign --timestamp --options runtime \
            --sign "Developer ID Application" \
            dist-universal/xcsp
      - name: Notarize macOS binary with Apple
        if: matrix.os == 'macos-latest'
        run: |
          xcrun notarytool submit dist-universal/xcsp \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PWD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PWD: ${{ secrets.APPLE_APP_SPECIFIC_PWD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      - name: Staple notarization ticket
        if: matrix.os == 'macos-latest'
        run: |
          xcrun stapler staple dist-universal/xcsp
      - name: Package signed universal binary for Homebrew
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p brew_tmp/bin brew_tmp/share/xcsp-launcher/configs brew_tmp/share/xcsp-launcher/tools
          cp dist-universal/xcsp brew_tmp/bin/xcsp-macos
          cp -r configs/* brew_tmp/share/xcsp-launcher/configs/
          cp xcsp/tools/xcsp3-solutionChecker-2.5.jar brew_tmp/share/xcsp-launcher/tools/
          tar -czvf xcsp-$(git describe --tags --abbrev=0)-macos.tar.gz -C brew_tmp .
      - name: Homebrew (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          sha256=$(shasum -a 256 xcsp-$(git describe --tags --abbrev=0)-macos.tar.gz | awk '{print $1}')
          url="https://github.com/CPToolset/xcsp-launcher/releases/download/$(git describe --tags --abbrev=0)/xcsp-$(git describe --tags --abbrev=0)-macos.tar.gz"
          sed -e "s|__URL__|$url|" -e "s|__SHASUM__|$sha256|" .packaging/homebrew/xcsp.rb.template > .packaging/homebrew/xcsp.rb
          git clone --quiet https://x-access-token:${{ secrets.XCSP_GITHUB_TOKEN }}@github.com/CPToolset/homebrew-xcsp-launcher.git brew-tap
          cp .packaging/homebrew/xcsp.rb brew-tap/Formula/xcsp.rb
          cd brew-tap && git add Formula/xcsp.rb && git commit -m "Update formula for version $(git describe --tags --abbrev=0)" && git push
        env:
          GITHUB_TOKEN: ${{ secrets.XCSP_GITHUB_TOKEN }}

#      - name: Chocolatey (Windows only)
#        if: matrix.os == 'windows-latest'
#        shell: powershell
#        run: |
#          Copy-Item dist/xcsp.exe -Destination "chocolatey/tools/xcsp.exe"
#          Copy-Item xcsp/tools/xcsp3-solutionChecker-2.5.jar -Destination "chocolatey/tools/xcsp3-solutionChecker-2.5.jar"
#          Push-Location chocolatey
#          choco pack xcsp-launcher.nuspec
#          Pop-Location
#          choco push chocolatey/xcsp-launcher.*.nupkg --api-key ${{ secrets.CHOCOLATEY_API_KEY }} --source="https://push.chocolatey.org/"
      - name: Rename Linux binary
        if: matrix.os == 'ubuntu-latest'
        run: |
            if [ -f dist/xcsp ]; then
            cp dist/xcsp dist/xcsp-linux-x86_64
            fi

      - name: Expose macOS universal binary under dist
        if: matrix.os == 'macos-latest'
        run: |
             mkdir -p dist
            # dist-universal/xcsp est d√©j√† l‚Äôuniversal (arm64+x86_64) sign√©+notaris√©
             cp dist-universal/xcsp dist/xcsp-macos-universal

      - name: Rename Windows binary
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
           if [ -f dist/xcsp.exe ]; then
              cp dist/xcsp.exe dist/xcsp-windows-x86_64.exe
           fi
      - name: Upload built binaries and packages
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: |
            dist/xcsp*
            *.deb
            *.rpm
            *.pkg.tar.*
            xcsp-*-macos.tar.gz
            *.snap
            chocolatey/*.nupkg

  finalize:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Download all built binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate checksums
        run: |
          find artifacts -type f -exec sha256sum {} \; > checksums.txt

      - name: Sign checksums.txt with cosign
        run: |
          cosign sign-blob --yes \
            --output-signature checksums.txt.sig \
            --output-certificate checksums.txt.pem \
            checksums.txt
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true # force draft release to allow manual review before publishing
          prerelease: ${{ contains(github.ref_name, 'a') || contains(github.ref_name, 'b') || contains(github.ref_name, 'rc') }}
          body: |
            ${{steps.github_release.outputs.changelog}}

            ---

            ## üîê Verifying the artifacts

            All release artifacts (executables and packages for every OS) are included in the signed `checksums.txt` file.

            ### How to verify:

            1. Download `checksums.txt`, `checksums.txt.sig`, and `checksums.txt.pem` from the release.
            2. Run this command:

            ```bash
            cosign verify-blob \
              --cert checksums.txt.pem \
              --signature checksums.txt.sig \
              --certificate-identity "https://github.com/CPToolset/xcsp-launcher/.github/workflows/release.yml@refs/heads/main" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
              checksums.txt
            ```

            If the output is `Verified OK`, you can then validate the integrity of the downloaded files:

            ```bash
            sha256sum --ignore-missing -c checksums.txt
            ```
          files: |
            artifacts/**/*
            checksums.txt
            checksums.txt.sig
            checksums.txt.pem
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
